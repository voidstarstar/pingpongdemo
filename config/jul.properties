# java.util.logging properties
#
# A property "handlers". This defines a whitespace or comma separated list of class names for handler classes to load and register as handlers on the root Logger (the Logger named ""). Each class name must be for a Handler class which has a default constructor. Note that these Handlers may be created lazily, when they are first used.
# A property "<logger>.handlers". This defines a whitespace or comma separated list of class names for handlers classes to load and register as handlers to the specified logger. Each class name must be for a Handler class which has a default constructor. Note that these Handlers may be created lazily, when they are first used.
# A property "<logger>.useParentHandlers". This defines a boolean value. By default every logger calls its parent in addition to handling the logging message itself, this often result in messages being handled by the root logger as well. When setting this property to false a Handler needs to be configured for this logger otherwise no logging messages are delivered.
# All properties whose names end with ".level" are assumed to define log levels for Loggers. Thus "foo.level" defines a log level for the logger called "foo" and (recursively) for any of its children in the naming hierarchy. Log Levels are applied in the order they are defined in the properties file. Thus level settings for child nodes in the tree should come after settings for their parents. The property name ".level" can be used to set the level for the root of the tree.
#
# ConsoleHandler
# ==============
# This Handler publishes log records to System.err. By default the SimpleFormatter is used to generate brief summaries.
# Configuration: By default each ConsoleHandler is initialized using the following LogManager configuration properties. If properties are not defined (or have invalid values) then the specified default values are used.
#
# java.util.logging.ConsoleHandler.level specifies the default level for the Handler (defaults to Level.INFO).
# java.util.logging.ConsoleHandler.filter specifies the name of a Filter class to use (defaults to no Filter).
# java.util.logging.ConsoleHandler.formatter specifies the name of a Formatter class to use (defaults to java.util.logging.SimpleFormatter).
# java.util.logging.ConsoleHandler.encoding the name of the character set encoding to use (defaults to the default platform encoding).
#
#
# FileHandler
# ===========
#
# The FileHandler can either write to a specified file, or it can write to a rotating set of files.
# For a rotating set of files, as each file reaches a given size limit, it is closed, rotated out, and a new file opened. Successively older files are named by adding "0", "1", "2", etc. into the base filename.
# By default buffering is enabled in the IO libraries but each log record is flushed out when it is complete.
# By default the XMLFormatter class is used for formatting.
#
# By default each FileHandler is initialized using the following LogManager configuration properties. If properties are not defined (or have invalid values) then the specified default values are used.
# 
# java.util.logging.FileHandler.level specifies the default level for the Handler (defaults to Level.ALL).
# java.util.logging.FileHandler.filter specifies the name of a Filter class to use (defaults to no Filter).
# java.util.logging.FileHandler.formatter specifies the name of a Formatter class to use (defaults to java.util.logging.XMLFormatter)
# java.util.logging.FileHandler.encoding the name of the character set encoding to use (defaults to the default platform encoding).
# java.util.logging.FileHandler.limit specifies an approximate maximum amount to write (in bytes) to any one file. If this is zero, then there is no limit. (Defaults to no limit).
# java.util.logging.FileHandler.count specifies how many output files to cycle through (defaults to 1).
# java.util.logging.FileHandler.pattern specifies a pattern for generating the output file name. See below for details. (Defaults to "%h/java%u.log").
# java.util.logging.FileHandler.append specifies whether the FileHandler should append onto any existing files (defaults to false).
# A pattern consists of a string that includes the following special components that will be replaced at runtime:
# 
# "/" the local pathname separator
# "%t" the system temporary directory
# "%h" the value of the "user.home" system property
# "%g" the generation number to distinguish rotated logs
# "%u" a unique number to resolve conflicts
# "%%" translates to a single percent sign "%"
# If no "%g" field has been specified and the file count is greater than one, then the generation number will be added to the end of the generated filename, after a dot.
# Thus for example a pattern of "%t/java%g.log" with a count of 2 would typically cause log files to be written on Solaris to /var/tmp/java0.log and /var/tmp/java1.log whereas on Windows 95 they would be typically written to C:\TEMP\java0.log and C:\TEMP\java1.log
#
#
# SimpleFormatter
# ===============
#
# The formatting can be customized by specifying the format string in the java.util.logging.SimpleFormatter.format property. The given LogRecord will be formatted as if by calling:
# 
#     String.format(format, date, source, logger, level, message, thrown);
#  
# where the arguments are:
#    format  - the java.util.Formatter format string specified in the java.util.logging.SimpleFormatter.format property or the default format.
# 1. date    - a Date object representing event time of the log record.
# 2. source  - a string representing the caller, if available; otherwise, the logger's name.
# 3. logger  - the logger's name.
# 4. level   - the log level.
# 5. message - the formatted log message returned from the Formatter.formatMessage(LogRecord) method. It uses java.text formatting and does not use the java.util.Formatter format argument.
# 6. thrown  - a string representing the throwable associated with the log record and its backtrace beginning with a newline character, if any; otherwise, an empty string.
#
#


handlers=java.util.logging.ConsoleHandler

java.util.logging.SimpleFormatter.format=%1$tT.%1$tL #%7$-5s %3$60s [%4$-7s] %5$s %6$s\n

java.util.logging.ConsoleHandler.level=ALL
java.util.logging.ConsoleHandler.formatter=co.paralleluniverse.common.logging.SimpleFormatter
#java.util.logging.ConsoleHandler.formatter=java.util.logging.SimpleFormatter

.level=INFO
#co.paralleluniverse.level=FINE
#co.paralleluniverse.galaxy.core.MainMemory.level=FINE
#co.paralleluniverse.galaxy.berkeleydb.level=FINEST
#co.paralleluniverse.galaxy.jdbc.level=FINEST
#co.paralleluniverse.galaxy.zookeeper.level=FINE
#co.paralleluniverse.galaxy.cluster.level=FINE
#co.paralleluniverse.galaxy.core.AbstractCluster=FINE
#co.paralleluniverse.galaxy.core.BackupImpl.level=FINE
#co.paralleluniverse.common.spring.Service.level=FINE
co.paralleluniverse.galaxy.netty.UDPComm.level=FINE
#co.paralleluniverse.galaxy.core.Cache.level=FINE
co.paralleluniverse.galaxy.jgroups.ReplicatedTree.level=INFO



